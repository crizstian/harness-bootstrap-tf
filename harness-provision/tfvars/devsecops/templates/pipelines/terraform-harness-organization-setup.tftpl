template:
  name: ${name}
  identifier: ${identifier}
  versionLabel: "${version}"
  description: "${description}"
  type: Pipeline
  tags: {}
  spec:
    stages:
      - stage:
          name: Terraform STO
          identifier: Terraform_STO
          template:
            templateRef: ${sto.template_id}
            versionLabel: "${sto.template_version}"
            templateInputs:
              type: SecurityTests
              variables:
                - name: k8s_connector_ref
                  type: String
                  value: <+input>
                - name: docker_connector_ref
                  type: String
                  value: <+input>
      - stage:
          name: Terraform
          identifier: Terraform
          description: ""
          type: Deployment
          spec:
            deploymentType: CustomDeployment
            customDeploymentRef:
              templateRef: ${template-deployment.template_id}
              versionLabel: "${template-deployment.template_version}"
            service:
              serviceRef: <+input>
              serviceInputs: <+input>
            execution:
              steps:
                - step:
                    name: Fetch Instances
                    identifier: fetchInstances
                    type: FetchInstanceScript
                    timeout: 10m
                    spec: {}
                - step:
                    type: TerraformPlan
                    name: Terraform Plan
                    identifier: Terraform_Plan
                    spec:
                      provisionerIdentifier: <+stage.variables.TERRAFORM_WORKSPACE>
                      configuration:
                        command: Apply
                        configFiles:
                          store:
                            spec:
                              connectorRef: <+pipeline.variables.GITHUB_CONNECTOR_ID>
                              gitFetchType: Branch
                              branch: <+stage.variables.TERRAFORM_BRANCH>
                              folderPath: <+stage.variables.TERRAFORM_FOLDER>
                              repoName: <+pipeline.variables.TERRAFORM_REPO>
                            type: Github
                          modulesource:                          
                            useConnectorCredentials: true
                        backendConfig:
                          type: Inline
                          spec:
                            content: |-
                              bucket = "<+stage.variables.GCS_BUCKET>"
                              prefix = "<+stage.variables.GCS_PREFIX>"
                        environmentVariables:
                          - name: HARNESS_ACCOUNT_ID
                            value: <+stage.variables.HARNESS_ACCOUNT_ID>
                            type: String
                          - name: HARNESS_PLATFORM_API_KEY
                            value: <+stage.variables.HARNESS_PLATFORM_API_KEY>
                            type: String
                          - name: HARNESS_ENDPOINT
                            value: <+stage.variables.HARNESS_ENDPOINT>
                            type: String
                          - name: GOOGLE_BACKEND_CREDENTIALS
                            value: <+stage.variables.GOOGLE_BACKEND_CREDENTIALS>
                            type: String
                        varFiles:
                          - varFile:
                              type: Remote
                              identifier: harness_account
                              spec:
                                store:
                                  type: Github
                                  spec:
                                    gitFetchType: Branch
                                    repoName: <+pipeline.variables.TERRAFORM_REPO>
                                    branch: <+stage.variables.TERRAFORM_BRANCH>
                                    paths:
                                      - tfvars/<+stage.variables.TERRAFORM_WORKSPACE>/account.tfvars
                                      - tfvars/<+stage.variables.TERRAFORM_WORKSPACE>/connectors.tfvars
                                      - tfvars/<+stage.variables.TERRAFORM_WORKSPACE>/environments.tfvars
                                      - tfvars/<+stage.variables.TERRAFORM_WORKSPACE>/services.tfvars
                                      - tfvars/<+stage.variables.TERRAFORM_WORKSPACE>/pipelines.tfvars
                                      - tfvars/<+stage.variables.TERRAFORM_WORKSPACE>/inputsets.tfvars
                                      - tfvars/<+stage.variables.TERRAFORM_WORKSPACE>/triggers.tfvars
                                      - tfvars/<+stage.variables.TERRAFORM_WORKSPACE>/variables.tfvars 
                                    connectorRef: <+pipeline.variables.GITHUB_CONNECTOR_ID>
                        secretManagerRef: account.harnessSecretManager
                        workspace: <+stage.variables.TERRAFORM_WORKSPACE>
                        exportTerraformPlanJson: true
                        skipRefreshCommand: false
                    timeout: 10m
                - step:
                    type: HarnessApproval
                    name: Approve
                    identifier: Approve
                    spec:
                      approvalMessage: Please review the following information and approve the pipeline progression
                      includePipelineExecutionHistory: true
                      approvers:
                        userGroups:
                          - account._account_all_users
                        minimumCount: 1
                        disallowPipelineExecutor: false
                      approverInputs: []
                    timeout: 1d
                - parallel:
                    - step:
                        type: TerraformApply
                        name: Terraform Apply
                        identifier: Terraform_Apply
                        spec:
                          provisionerIdentifier: <+stage.variables.TERRAFORM_WORKSPACE>
                          configuration:
                            type: InheritFromPlan
                        timeout: 10m
                        failureStrategies: []
                        when:                          
                          stageStatus: Success                          
                          condition: <+stage.variables.TERRAFORM_ACTION> == "apply"
                    - step:
                        type: TerraformDestroy
                        name: Terraform Destroy
                        identifier: Terraform_Destroy
                        spec:
                          provisionerIdentifier: <+stage.variables.TERRAFORM_WORKSPACE>
                          configuration:
                            type: InheritFromPlan
                        timeout: 10m
                        failureStrategies: []
                        when:                          
                          stageStatus: Success                          
                          condition: <+stage.variables.TERRAFORM_ACTION> == "destroy"
              rollbackSteps:
                - step:
                    type: TerraformRollback
                    name: Terraform Rollback
                    identifier: Terraform_Rollback
                    spec:
                      provisionerIdentifier: <+stage.variables.TERRAFORM_WORKSPACE>
                      delegateSelectors: []
                      skipRefreshCommand: false
                    timeout: 10m
            environment:
              environmentRef: <+input>
              deployToAll: false
              environmentInputs: <+input>
              serviceOverrideInputs: <+input>
              infrastructureDefinitions: <+input>
          tags: {}
          failureStrategies:
            - onFailure:
                errors:
                  - AllErrors
                action:
                  type: StageRollback
          variables:
            - name: GCS_BUCKET
              type: String
              description: ""
              value: <+input>.default(${GCS_BUCKET})
            - name: GCS_PREFIX
              type: String
              description: ""
              value: <+input>.default(${GCS_PREFIX})
            - name: HARNESS_ACCOUNT_ID
              type: String
              description: ""
              value: <+input>.default(${HARNESS_ACCOUNT_ID})
            - name: HARNESS_PLATFORM_API_KEY
              type: Secret
              description: ""
              value: <+input>.default(${HARNESS_PLATFORM_API_KEY})
            - name: HARNESS_ENDPOINT
              type: String
              description: ""
              value: https://app.harness.io/gateway
            - name: GOOGLE_BACKEND_CREDENTIALS
              type: Secret
              description: ""
              value: <+input>.default(${GOOGLE_BACKEND_CREDENTIALS})
            - name: TERRAFORM_WORKSPACE
              type: String
              description: ""
              value: <+input>
            - name: TERRAFORM_ACTION
              type: String
              description: ""
              value: <+input>.allowedValues(apply,destroy)
            - name: TERRAFORM_FOLDER
              type: String
              description: ""
              value: <+input>.default(${TERRAFORM_FOLDER})
            - name: TERRAFORM_BRANCH
              type: String
              description: ""
              value: <+codebase.branch>
            - name: DELEGATE_SELECTOR
              type: String
              description: ""
              value: <+input>.default(${DELEGATE_SELECTOR})
          delegateSelectors:
            - <+stage.variables.DELEGATE_SELECTOR>
    properties:      
      ci:        
        codebase:          
          connectorRef: <+pipeline.variables.GITHUB_CONNECTOR_ID>         
          repoName: <+pipeline.variables.TERRAFORM_REPO>         
          build: <+input>
    variables:      
      - name: GITHUB_CONNECTOR_ID        
        type: String        
        description: ""        
        value: <+input>
      - name: TERRAFORM_REPO        
        type: String        
        description: ""        
        value: <+input>.default(${TERRAFORM_REPO})