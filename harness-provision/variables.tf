variable "harness_platform_account_id" {}
variable "harness_platform_organizations" {}
variable "harness_platform_api_key" {
  sensitive = true
}
variable "harness_platform_delegates" {
  default = {}
}
variable "harness_platform_github_connectors" {
  default = {}
}
variable "harness_platform_pipelines" {
  default = {}
}
variable "harness_platform_inputsets" {
  default = {}
}
# ---
variable "custom_templates" {
  default = {}
}
variable "organization_prefix" {
  default = ""
}

locals {
  common_schema_delegate = {
    description            = "Delegate deployed and generated by terraform harness provider"
    size                   = "SMALL"
    tags                   = ["owner: ${var.organization_prefix}"]
    clusterPermissionType  = "CLUSTER_ADMIN"
    customClusterNamespace = "harness-delegate-ng"
  }

  delegates = { for type, delegates in var.harness_platform_delegates : type => { for key, value in delegates : key => merge(value, local.common_schema_delegate) } }

  k8s_connectors = merge([for type, delegates in var.harness_platform_delegates : {
    for key, value in delegates : key => merge(
      value,
      {
        description        = "K8s Connector generated by terraform harness provider"
        tags               = ["owner: ${var.organization_prefix}"]
        delegate_selectors = key
      }
    )
    } if type == "k8s"
  ]...)

  common_schema = {
    org_id     = module.bootstrap_harness_account.organization[var.organization_prefix].org_id
    project_id = module.bootstrap_harness_account.organization[var.organization_prefix].seed_project_id
    suffix     = module.bootstrap_harness_account.organization[var.organization_prefix].suffix
  }

  github_connectors = { for name, details in var.harness_platform_github_connectors : name => merge(
    details,
    {
      validation_repo = details.connection_type == "Repo" ? "" : details.validation_repo
      org_id          = details.connection_type == "Repo" ? module.bootstrap_harness_account.organization[var.organization_prefix].org_id : try(details.org_id, "")
      project_id      = details.connection_type == "Repo" ? module.bootstrap_harness_account.organization[var.organization_prefix].seed_project_id : try(details.project_id, "")
      credentials = {
        http = {
          username     = details.credentials.http.username
          token_ref_id = try(details.credentials.http.token_ref_id, "")
        }
      }
      api_authentication = {
        token_ref = try(details.credentials.http.token_ref_id, "")
      }
  }) if details.enable }



  pipelines = { for key, details in var.harness_platform_pipelines : key => merge(
    details,
    {
      common_schema = local.common_schema
      custom_template = {
        pipeline = merge(
          details.custom_template.pipeline,
          {
            vars = merge(
              details.custom_template.pipeline.vars,
              {
                # tf_account_setup
                git_connector_ref = module.bootstrap_harness_connectors.connectors.github_connectors["devsecops_connector_github_connector"].identifier

                # delegate_init
                service_ref     = harness_platform_service.service.identifier
                environment_ref = harness_platform_environment.environment.identifier
              }
            )
        })
        inputset = try(details.custom_template.inputset, {})
      }
    }) if can(details.custom_template.pipeline)
  }
}
